ARG PHP_VERSION=8.2
ARG APP_PORT=${APP_PORT}
FROM php:${PHP_VERSION}-fpm-alpine3.18 AS backend

ARG user=www-data
ARG group=www-data

RUN apk update && apk add --no-cache \
    nginx \
    libpng-dev \
    openssl-dev \
    libxml2-dev \
    curl-dev \
    linux-headers \
    libzip-dev \
    bash \
    $PHPIZE_DEPS && \
    pecl install xdebug && \
    docker-php-ext-install mysqli pdo pdo_mysql && \
    docker-php-ext-enable pdo_mysql xdebug && \
    docker-php-ext-install gd sockets && \
    curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && \
    apk del --purge $PHPIZE_DEPS && \
    rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

# Establecer variables de entorno para Composer
ENV COMPOSER_HOME=/composer \
    COMPOSER_ALLOW_SUPERUSER=1 \
    PATH=$PATH:/composer/vendor/bin

# Crear y configurar el directorio de cach√© de Composer
RUN mkdir -p /composer/cache && \
    chmod -R 775 /composer && \
    chown -R ${user}:${group} /composer

WORKDIR /app
COPY --chown=${user}:${group} . /app

RUN composer install --prefer-dist

RUN mkdir -p /run/nginx && \
    chown -R ${user}:${group} /app /run/nginx && \
    chmod -R 775 /app/storage

COPY etc/docker/php/xdebug.ini $PHP_INI_DIR/conf.d/
COPY etc/docker/nginx/default.conf /etc/nginx/http.d/
COPY etc/docker/php/php.ini /usr/local/etc/php/

EXPOSE ${APP_PORT}

CMD ["sh", "-c", "php-fpm -D && nginx -g 'daemon off;'"]